name: CI/CD Pipeline 

on:
  push: 
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  Continuous-Integration:

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        continue-on-error: false

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16"
          registry-url: "https://registry.npmjs.org"
        continue-on-error: false

      - name: Install Docker using Docker's official script
        run: |
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
        continue-on-error: false
        
      - name: Install Docker Compose
        run: |
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.3.3/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            docker-compose --version
        continue-on-error: false

      - name: Install dependencies
        working-directory: ./nodejs
        run: npm install
        continue-on-error: false

      - name: Start application-specific services using Docker Compose
        run: docker-compose -f docker-compose.development.yml up -d
        continue-on-error: false

      - name: Check service health
        uses: jaracogmbh/docker-compose-health-check-action@v1.0.0
        with:
          max-retries: 30
          retry-interval: 10
          compose-file: "docker-compose.development.yml"
          skip-exited: "true"
          skip-no-healthcheck: "true"
      
      - name: Log in to Docker hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME}}
          password: ${{ secrets.DOCKER_PASSWORD}}

      - name: push image to docker hub
        run: |
          docker-compose -f docker-compose.development.yml build
          IMAGE_NAME_1="radjes/webserver:latest"
          IMAGE_NAME_2="radjes/jsapp:latest"
          docker tag devops-practice_webserver $IMAGE_NAME_1
          docker tag devops-practice_jsapp $IMAGE_NAME_2  
          docker push $IMAGE_NAME_1
          docker push $IMAGE_NAME_2 
  
  Continuous-Delivery:
    needs: Continuous-Integration
    runs-on: self-hosted

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Run docker-compose
        run: docker-compose -f docker-compose.production.yml up -d

  Release-project:
    needs: Continuous-Delivery
    runs-on: ubuntu-latest
      
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: static-site
      
      - name: Archive site content
        uses: thedocter0/zip-release@master  
        with:
          filename: devops-project.zip
      
      - name: Create GitHub release
        id: create-new-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
      
      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-new-release.outputs.upload_url }}
          asset_path: ./devops-project.zip
          asset_name: site-v${{ github.run_number }}.zip
          asset_content_type: application/zip           
